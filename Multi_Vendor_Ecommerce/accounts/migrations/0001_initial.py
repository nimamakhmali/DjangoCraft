# Generated by Django 5.2.5 on 2025-08-16 09:33

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text='Required. Enter a valid email address.', max_length=254, unique=True, verbose_name='email address')),
                ('phone_number', models.CharField(blank=True, help_text='Phone number in international format (e.g., +1234567890)', max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('role', models.CharField(choices=[('customer', 'Customer'), ('vendor', 'Vendor'), ('admin', 'Admin')], default='customer', help_text='User role in the system', max_length=10)),
                ('is_verified', models.BooleanField(default=False, help_text='Whether the user has verified their email/phone')),
                ('is_active_vendor', models.BooleanField(default=False, help_text='Whether the vendor account is active and approved')),
                ('date_of_birth', models.DateField(blank=True, help_text='User date of birth', null=True)),
                ('profile_picture', models.ImageField(blank=True, help_text='User profile picture', null=True, upload_to='profile_pictures/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CustomerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, help_text='Customer bio or description')),
                ('newsletter_subscription', models.BooleanField(default=True, help_text='Whether customer wants to receive newsletters')),
                ('marketing_emails', models.BooleanField(default=True, help_text='Whether customer wants to receive marketing emails')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='customer_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Customer Profile',
                'verbose_name_plural': 'Customer Profiles',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VendorProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('store_name', models.CharField(help_text='Unique name for the vendor store', max_length=100, unique=True)),
                ('store_description', models.TextField(blank=True, help_text='Description of the vendor store')),
                ('store_logo', models.ImageField(blank=True, help_text='Store logo image', null=True, upload_to='store_logos/')),
                ('business_license', models.CharField(blank=True, help_text='Business license number', max_length=50)),
                ('tax_id', models.CharField(blank=True, help_text='Tax identification number', max_length=50)),
                ('business_address', models.TextField(help_text='Business address')),
                ('business_phone', models.CharField(help_text='Business phone number', max_length=17)),
                ('business_email', models.EmailField(help_text='Business email address', max_length=254)),
                ('website', models.URLField(blank=True, help_text='Vendor website URL')),
                ('facebook', models.URLField(blank=True, help_text='Facebook page URL')),
                ('instagram', models.URLField(blank=True, help_text='Instagram profile URL')),
                ('commission_rate', models.DecimalField(decimal_places=2, default=10.0, help_text='Commission rate percentage (e.g., 10.00 for 10%)', max_digits=5)),
                ('is_approved', models.BooleanField(default=False, help_text='Whether the vendor is approved by admin')),
                ('approval_date', models.DateTimeField(blank=True, help_text='Date when vendor was approved', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='vendor_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Vendor Profile',
                'verbose_name_plural': 'Vendor Profiles',
                'ordering': ['-created_at'],
            },
        ),
    ]
